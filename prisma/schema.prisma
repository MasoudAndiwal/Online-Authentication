// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URLlmcmcciujxnkmjgc.supabase.co")
}

// Enums for status fields
enum StudentStatus {
  ACTIVE
  SICK
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
}

enum OfficeRole {
  ADMIN
  STAFF
  MANAGER
}

model Student {
  id              String        @id @default(cuid())
  firstName       String        @db.VarChar(50)
  lastName        String        @db.VarChar(50)
  fatherName      String        @db.VarChar(70)
  grandFatherName String        @db.VarChar(70)
  studentId       String        @unique @db.VarChar(20)
  dateOfBirth     DateTime?
  phone           String        @unique @db.VarChar(20)
  fatherPhone     String        @db.VarChar(20)
  address         String        @db.Text
  programs        String        @db.VarChar(40)
  semester        String        @db.VarChar(20)
  enrollmentYear  String        @db.VarChar(4)
  classSection    String        @db.VarChar(20)
  timeSlot        String        @db.VarChar(50)
  username        String        @unique @db.VarChar(30)
  studentIdRef    String        @db.VarChar(20)
  password        String        @unique @db.VarChar(255)
  status          StudentStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Performance indexes for common query patterns
  @@index([firstName, lastName]) // Full-text search on names
  @@index([studentId]) // Individual student lookup
  @@index([programs, semester, classSection]) // Composite index for filtering
  @@index([status]) // Status filtering
  @@index([createdAt]) // Sorting by creation date
  @@index([username]) // Username lookup
  @@map("students")
}

model Teacher {
  id              String        @id @default(cuid())
  firstName       String        @db.VarChar(50)
  lastName        String        @db.VarChar(50)
  fatherName      String        @db.VarChar(70)
  grandFatherName String        @db.VarChar(70)
  teacherId       String        @unique @db.VarChar(20)
  dateOfBirth     DateTime?
  phone           String        @unique @db.VarChar(20)
  secondaryPhone  String?       @db.VarChar(20)
  address         String        @db.Text
  departments     String[]
  qualification   String        @db.VarChar(100)
  experience      String        @db.VarChar(50)
  specialization  String        @db.VarChar(100)
  subjects        String[]
  classes         String[]
  username        String        @unique @db.VarChar(30)
  password        String        @unique @db.VarChar(255)
  status          TeacherStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Performance indexes for common query patterns
  @@index([firstName, lastName]) // Full-text search on names
  @@index([teacherId]) // Individual teacher lookup
  @@index([departments, status]) // Composite index for filtering by department and status
  @@index([subjects]) // Subject filtering
  @@index([status]) // Status filtering
  @@index([createdAt]) // Sorting by creation date
  @@index([username]) // Username lookup
  @@map("teachers")
}

model Office {
  id             String     @id @default(cuid())
  firstName      String     @db.VarChar(80)
  lastName       String     @db.VarChar(80)
  email          String     @unique @db.VarChar(100)
  phone          String     @unique @db.VarChar(20)
  role           OfficeRole @default(STAFF)
  supabaseUserId String     @unique
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Performance indexes for office staff
  @@index([email]) // Email lookup
  @@index([supabaseUserId]) // Supabase user ID lookup
  @@index([role, isActive]) // Role-based filtering with active status
  @@map("office_staff")
}
